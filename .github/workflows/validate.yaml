name: Validate and Bump Version

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: HACS validation
        uses: hacs/action@main
        with:
          category: integration

      - name: Hassfest validation
        uses: home-assistant/actions/hassfest@master

  version-bump:
    runs-on: ubuntu-latest
    needs: validate
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      (contains(github.event.head_commit.message, 'upgrade:') ||
       contains(github.event.head_commit.message, 'feature:') ||
       contains(github.event.head_commit.message, 'fix:'))
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHB_TOKEN }}

      - name: Get current version from manifest.json
        id: get_current_version
        run: |
          current_version=$(grep -Po '"version": "\K[0-9]+\.[0-9]+\.[0-9]+' custom_components/sapi/manifest.json)
          echo "current_version=${current_version}" >> $GITHUB_OUTPUT

      - name: Determine version bump type
        id: bump_type
        run: |
          commit_msg="${{ github.event.head_commit.message }}"
          if [[ $commit_msg == *"upgrade:"* ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif [[ $commit_msg == *"feature:"* ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          elif [[ $commit_msg == *"fix:"* ]]; then
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        id: bump_version
        run: |
          current_version=${{ steps.get_current_version.outputs.current_version }}
          IFS='.' read -r major minor patch <<< "$current_version"

          case "${{ steps.bump_type.outputs.type }}" in
            major)
              new_major=$((major + 1))
              new_minor=0
              new_patch=0
              ;;
            minor)
              new_major=$major
              new_minor=$((minor + 1))
              new_patch=0
              ;;
            patch)
              new_major=$major
              new_minor=$minor
              new_patch=$((patch + 1))
              ;;
          esac

          new_version="$new_major.$new_minor.$new_patch"
          echo "new_version=${new_version}" >> $GITHUB_OUTPUT

      - name: Update manifest.json
        run: |
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ steps.bump_version.outputs.new_version }}\"/" custom_components/sapi/manifest.json

      - name: Create changelog entry
        run: |
          #!/bin/bash

          # Get all tags sorted in version order, filtering for tags after v0.0.12
          versions=$(git tag | grep '^v[0-9]' | awk -F. '{print $3}' | sort -n | awk '$1 > 12')

          # Iterate through versions after 0.0.12
          for version in $versions; do
            full_version="v0.0.${version}"
            previous_version="v0.0.$((version-1))"

            # Get commits between previous and current version
            commits=$(git log "${previous_version}..${full_version}" --oneline --no-merges)

            # Format commit messages
            commit_messages=""
            while read -r line; do
              commit_hash=$(echo "$line" | awk '{print $1}')
              commit_msg=$(echo "$line" | cut -d' ' -f2-)

              # Extract and remove type prefix
              type_match=$(printf '%s' "$commit_msg" | cut -d':' -f1)
              if [ -n "$type_match" ]; then
                # Remove the type prefix from the message
                type=$(printf '%s' "$type_match" | tr -d ':')
                commit_msg=$(printf '%s' "$commit_msg" | sed "s/^${type_match}\s*//")
                # Create badge for the type
                type_badge="![${type}](https://img.shields.io/badge/-${type}-blue)"
                commit_messages+="- [${commit_hash}](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${commit_hash}) ${type_badge} ${commit_msg}"$'\n'
              else
                # If no type prefix, create entry without badge
                commit_messages+="- [${commit_hash}](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${commit_hash}) ${commit_msg}"$'\n'
              fi
            done <<< "${commits}"

            # Generate changelog entry for this version
            new_entry="## [0.0.${version}] - $(git log -1 --format=%ci ${full_version} | cut -d' ' -f1)"$'\n\n'"${commit_messages}"$'\n'

            # Insert into CHANGELOG.md
            if [ -f CHANGELOG.md ]; then
              awk -v new_entry="$new_entry" '
              BEGIN {insert=0}
              /^## \[/ && insert == 0 {
                gsub(/\n$/, "", new_entry)
                print new_entry
                insert=1
              }
              {print}
              ' CHANGELOG.md > temp_changelog.md
              mv temp_changelog.md CHANGELOG.md
            else
              printf "<!-- markdownlint-disable MD024 -->\n# Changelog\n\nAll notable changes to the SAPI Home Assistant integration will be documented in this file.\n\n%s" "$new_entry" > CHANGELOG.md
            fi
          done

      - name: Commit and push changes
        run: |
          git config --local user.email "admin@ajaysingh.com.np"
          git config --local user.name "Ajay Singh"

          git add custom_components/sapi/manifest.json CHANGELOG.md
          git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }}"
          git tag -a "v${{ steps.bump_version.outputs.new_version }}" -m "Release v${{ steps.bump_version.outputs.new_version }}"
          git push
          git push --tags
