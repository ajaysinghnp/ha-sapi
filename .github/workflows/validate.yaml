# .github/workflows/validate.yml
name: Validate and Bump Version

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: HACS validation
        uses: hacs/action@main
        with:
          category: integration

      - name: Hassfest validation
        uses: home-assistant/actions/hassfest@master

  version-bump:
    needs: validate
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      (contains(github.event.head_commit.message, 'upgrade:') ||
       contains(github.event.head_commit.message, 'feature:') ||
       contains(github.event.head_commit.message, 'fix:'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT

      - name: Determine version bump type
        id: bump_type
        run: |
          commit_msg="${{ github.event.head_commit.message }}"
          if [[ $commit_msg == *"upgrade:"* ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif [[ $commit_msg == *"feature:"* ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          elif [[ $commit_msg == *"fix:"* ]]; then
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        id: bump_version
        run: |
          latest_version=${latest_tag#v}

          # Ensure valid version format
          if [[ ! "$latest_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            latest_version="0.0.0"
          fi

          IFS='.' read -r major minor patch <<< "$latest_version"

          case "${{ steps.bump_type.outputs.type }}" in
            major)
              new_major=$((major + 1))
              new_minor=0
              new_patch=0
              ;;
            minor)
              new_major=$major
              new_minor=$((minor + 1))
              new_patch=0
              ;;
            patch)
              new_major=$major
              new_minor=$minor
              new_patch=$((patch + 1))
              ;;
          esac

          new_tag="v$new_major.$new_minor.$new_patch"
          echo "new_tag=${new_tag}" >> $GITHUB_OUTPUT
          echo "new_version=$new_major.$new_minor.$new_patch" >> $GITHUB_OUTPUT

      - name: Update manifest.json
        run: |
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ steps.bump_version.outputs.new_version }}\"/" custom_components/sapi/manifest.json

      - name: Create changelog entry
        run: |
          commit_msg="${{ github.event.head_commit.message }}"
          echo "## [${{ steps.bump_version.outputs.new_version }}] - $(date +'%Y-%m-%d')" >> temp_changelog.md
          echo "${commit_msg#*:}" >> temp_changelog.md
          echo "" >> temp_changelog.md
          if [ -f CHANGELOG.md ]; then
            cat CHANGELOG.md >> temp_changelog.md
          fi
          mv temp_changelog.md CHANGELOG.md

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add custom_components/sapi/manifest.json CHANGELOG.md
          git commit -m "Bump version to ${{ steps.bump_version.outputs.new_tag }}"
          git tag -a "${{ steps.bump_version.outputs.new_tag }}" -m "Release ${{ steps.bump_version.outputs.new_tag }}"
          git push
          git push --tags
